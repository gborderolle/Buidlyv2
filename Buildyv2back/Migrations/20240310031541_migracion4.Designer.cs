// <auto-generated />
using System;
using Buildyv2.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Buildyv2.Migrations
{
    [DbContext(typeof(ContextDB))]
    [Migration("20240310031541_migracion4")]
    partial class migracion4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Buildyv2.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Buildyv2.Models.BuildyRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c",
                            Creation = new DateTime(2024, 3, 10, 0, 15, 39, 963, DateTimeKind.Local).AddTicks(1639),
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Update = new DateTime(2024, 3, 10, 0, 15, 39, 963, DateTimeKind.Local).AddTicks(1644)
                        },
                        new
                        {
                            Id = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c",
                            Creation = new DateTime(2024, 3, 10, 0, 15, 39, 963, DateTimeKind.Local).AddTicks(1653),
                            Name = "User",
                            NormalizedName = "USER",
                            Update = new DateTime(2024, 3, 10, 0, 15, 39, 963, DateTimeKind.Local).AddTicks(1653)
                        });
                });

            modelBuilder.Entity("Buildyv2.Models.BuildyUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c2ee6493-5a73-46f3-a3f2-46d1d11d7176",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4eff9577-529b-492c-9717-684dfbcde2a0",
                            Creation = new DateTime(2024, 3, 10, 0, 15, 39, 963, DateTimeKind.Local).AddTicks(1740),
                            Email = "admin@buildy.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Usuario administrador",
                            NormalizedEmail = "ADMIN@BUILDY.LAT",
                            NormalizedUserName = "USERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJfkcAQpDZMT6xaGRY9v8PgA+1ML2VAUFycm2tnBxKID/dxjW1nrnuScjVAr2OoWYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46fffe2d-e16e-4cba-9d29-050a1de6517c",
                            TwoFactorEnabled = false,
                            Update = new DateTime(2024, 3, 10, 0, 15, 39, 963, DateTimeKind.Local).AddTicks(1741),
                            UserName = "useradmin"
                        },
                        new
                        {
                            Id = "e0765c93-676c-4199-b7ee-d7877c471821",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f267a0ed-87da-4162-9af3-c4c5a2c1b015",
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 58, DateTimeKind.Local).AddTicks(1570),
                            Email = "normal@buildy.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Usuario normal",
                            NormalizedEmail = "NORMAL@BUILDY.LAT",
                            NormalizedUserName = "USERNORMAL",
                            PasswordHash = "AQAAAAIAAYagAAAAECPQT+EfMOCDpyggVOwPnaH4+RcxggMs/M115175ksOfa/Mdzcp5/J5TtL19736Vug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff6cac90-938f-4521-b23c-1c9e11a2b340",
                            TwoFactorEnabled = false,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 58, DateTimeKind.Local).AddTicks(1597),
                            UserName = "usernormal"
                        },
                        new
                        {
                            Id = "58fbedfc-e682-479b-ba46-19ef4c137d2a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65063b1a-a7b5-4345-bd7a-b0ebd564b80e",
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 176, DateTimeKind.Local).AddTicks(3835),
                            Email = "mirta@buildy.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Mirta de los Santos",
                            NormalizedEmail = "MIRTA@BUILDY.LAT",
                            NormalizedUserName = "MIRTADLS",
                            PasswordHash = "AQAAAAIAAYagAAAAEF4lxRQCuSH2yj4CcmZPFswznwGICay9HLPx/k271Ol0DJjhZiVzarIkEHcoKsqE5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8f104fa-e676-430c-998b-4a82e03f444a",
                            TwoFactorEnabled = false,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 176, DateTimeKind.Local).AddTicks(3854),
                            UserName = "mirtadls"
                        },
                        new
                        {
                            Id = "11c767dc-e8ce-448e-8fdb-ee590a44a3ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f328bd07-90dd-43bc-8963-830b7a42329c",
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 278, DateTimeKind.Local).AddTicks(6206),
                            Email = "gladys@buildy.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Gladys de los Santos",
                            NormalizedEmail = "GLADYS@BUILDY.LAT",
                            NormalizedUserName = "IRGLA",
                            PasswordHash = "AQAAAAIAAYagAAAAEMM/cGZUvjzCL93iBDa7EGbvsFKdi5X30QByUq1EJymoEo4yDelwDDRt8EJBePz7RA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3205b28a-a998-41c7-911e-4298ba07321c",
                            TwoFactorEnabled = false,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 278, DateTimeKind.Local).AddTicks(6225),
                            UserName = "irgla"
                        });
                });

            modelBuilder.Entity("Buildyv2.Models.CityDS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NominatimCityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceDSId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceDSId");

                    b.ToTable("CityDS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(1937),
                            Name = "Melo",
                            NominatimCityCode = "ME",
                            ProvinceDSId = 1,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(1938)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(1941),
                            Name = "Montevideo",
                            NominatimCityCode = "MO",
                            ProvinceDSId = 2,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(1941)
                        });
                });

            modelBuilder.Entity("Buildyv2.Models.CountryDS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NominatimCountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CountryDS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(1059),
                            Name = "Uruguay",
                            NominatimCountryCode = "UY",
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(1089)
                        });
                });

            modelBuilder.Entity("Buildyv2.Models.Estate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityDSId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EstateIsRented")
                        .HasColumnType("bit");

                    b.Property<string>("GoogleMapsURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OwnerDSId")
                        .HasColumnType("int");

                    b.Property<int?>("PresentRentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityDSId");

                    b.HasIndex("OwnerDSId");

                    b.ToTable("Estate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Colón 476",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2163),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/C.+Col%C3%B3n+476,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.3674814,-54.1757085,17z/data=!3m1!4b1!4m6!3m5!1s0x95092980b6fbe707:0x3f99b6b98961385b!8m2!3d-32.3674814!4d-54.1731282!16s%2Fg%2F11fn9p0pws?hl=es-419&entry=ttu",
                            LatLong = "-32.3674814,-54.1757085",
                            Name = "Colón 476",
                            OwnerDSId = 3,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2164)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Colón 480",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2190),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/C.+Col%C3%B3n+480,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.3674762,-54.1755751,17z/data=!3m1!4b1!4m6!3m5!1s0x95092980b0c5f12b:0xaf5b5ba2ea4eb1cb!8m2!3d-32.3674762!4d-54.1729948!16s%2Fg%2F11rz98nq5_?hl=es-419&entry=ttu",
                            LatLong = "-32.3674762,-54.1755751",
                            Name = "Colón 480",
                            OwnerDSId = 2,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2191)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Colón 491",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2194),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/C.+Col%C3%B3n+491,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.367241,-54.1754153,17z/data=!3m1!4b1!4m6!3m5!1s0x95092980b180e29b:0x95542a9eb2345b16!8m2!3d-32.367241!4d-54.172835!16s%2Fg%2F11fctc9z9z?hl=es-419&entry=ttu",
                            LatLong = "-32.367241,-54.1754153",
                            Name = "Colón 491",
                            OwnerDSId = 2,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2195)
                        },
                        new
                        {
                            Id = 4,
                            Address = "Colón 495",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2198),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/C.+Col%C3%B3n+495,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.3672195,-54.1755857,17z/data=!3m1!4b1!4m6!3m5!1s0x95092980b3f659db:0xf3c82a67cd3ebe76!8m2!3d-32.3672195!4d-54.1730054!16s%2Fg%2F11gmz50cjj?hl=es-419&entry=ttu",
                            LatLong = "-32.3672195,-54.1755857",
                            Name = "Colón 495",
                            OwnerDSId = 2,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2211)
                        },
                        new
                        {
                            Id = 5,
                            Address = "Colón 503",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2219),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/C.+Col%C3%B3n+503,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.3672809,-54.1751337,17z/data=!3m1!4b1!4m5!3m4!1s0x95092980a659bd3f:0x1f64283da64670a9!8m2!3d-32.3672809!4d-54.1725534?hl=es-419&entry=ttu",
                            LatLong = "-32.3672809,-54.1751337",
                            Name = "Colón 503",
                            OwnerDSId = 2,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2233)
                        },
                        new
                        {
                            Id = 6,
                            Address = "Darío Silva 774",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2257),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/Calle+Dr.+Juan+Dar%C3%ADo+Silva+774,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.3679807,-54.1752022,17z/data=!3m1!4b1!4m6!3m5!1s0x95092980a2c60edb:0x48ad692931a026ea!8m2!3d-32.3679807!4d-54.1726219!16s%2Fg%2F11gr6dzf3g?hl=es-419&entry=ttu",
                            LatLong = "-32.3679807,-54.1752022",
                            Name = "Darío Silva 774",
                            OwnerDSId = 1,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2258)
                        },
                        new
                        {
                            Id = 7,
                            Address = "Darío Silva 774 BIS",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2272),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/Calle+Dr.+Juan+Dar%C3%ADo+Silva+774,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.3679807,-54.1752022,17z/data=!3m1!4b1!4m6!3m5!1s0x95092980a2c60edb:0x48ad692931a026ea!8m2!3d-32.3679807!4d-54.1726219!16s%2Fg%2F11gr6dzf3g?hl=es-419&entry=ttu",
                            LatLong = "-32.3679807,-54.1752022",
                            Name = "Darío Silva 774 BIS",
                            OwnerDSId = 1,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2273)
                        },
                        new
                        {
                            Id = 8,
                            Address = "Darío Silva 781",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2532),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/Calle+Dr.+Juan+Dar%C3%ADo+Silva+781,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.3675191,-54.1753876,17z/data=!3m1!4b1!4m6!3m5!1s0x95092980b076246d:0x1b122d0ac3c1dbc7!8m2!3d-32.3675191!4d-54.1728073!16s%2Fg%2F11g194j1tj?hl=es-419&entry=ttu",
                            LatLong = "-32.3675191,-54.1753876",
                            Name = "Darío Silva 781",
                            OwnerDSId = 1,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2533)
                        },
                        new
                        {
                            Id = 9,
                            Address = "Darío Silva 785",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2539),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/Calle+Dr.+Juan+Dar%C3%ADo+Silva+785,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.3676402,-54.1754579,17z/data=!3m1!4b1!4m6!3m5!1s0x95092980ba5f73d1:0x186b45d8ed124b2a!8m2!3d-32.3676402!4d-54.1728776!16s%2Fg%2F11sb62lb6c?hl=es-419&entry=ttu",
                            LatLong = "-32.3676402,-54.1754579",
                            Name = "Darío Silva 785",
                            OwnerDSId = 2,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2540)
                        },
                        new
                        {
                            Id = 10,
                            Address = "Darío Silva 789",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2542),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/Calle+Dr.+Juan+Dar%C3%ADo+Silva+789,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.3676919,-54.1754685,17z/data=!3m1!4b1!4m6!3m5!1s0x95092980ba535f25:0xbdc6468d3ed51cc1!8m2!3d-32.3676919!4d-54.1728882!16s%2Fg%2F11syz1ryh9?hl=es-419&entry=ttu",
                            LatLong = "-32.3676919,-54.1754685",
                            Name = "Darío Silva 789",
                            OwnerDSId = 1,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2543)
                        },
                        new
                        {
                            Id = 11,
                            Address = "Darío Silva 793",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2546),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/Calle+Dr.+Juan+Dar%C3%ADo+Silva+793,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.3675108,-54.1754001,17z/data=!3m1!4b1!4m6!3m5!1s0x95092980b079be31:0xa19a7a3d822a0595!8m2!3d-32.3675108!4d-54.1728198!16s%2Fg%2F11h_c4rxz9?hl=es-419&entry=ttu",
                            LatLong = "-32.3675108,-54.1754001",
                            Name = "Darío Silva 793",
                            OwnerDSId = 1,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2547)
                        },
                        new
                        {
                            Id = 12,
                            Address = "Darío Silva 801",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2549),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/Calle+Dr.+Juan+Dar%C3%ADo+Silva+801,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.3673741,-54.1752804,17z/data=!3m1!4b1!4m5!3m4!1s0x95092980ad44ba05:0x3da437edd983606!8m2!3d-32.3673741!4d-54.1727001?hl=es-419&entry=ttu",
                            LatLong = "-32.3673741,-54.1752804",
                            Name = "Darío Silva 801",
                            OwnerDSId = 1,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2550)
                        },
                        new
                        {
                            Id = 13,
                            Address = "Darío Silva 803",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2572),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/Calle+Dr.+Juan+Dar%C3%ADo+Silva+803,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.3673108,-54.1755231,17z/data=!3m1!4b1!4m5!3m4!1s0x95092980ad44ba05:0x24b5f3fc904ac228!8m2!3d-32.3673108!4d-54.1729428?hl=es-419&entry=ttu",
                            LatLong = "-32.3673108,-54.1755231",
                            Name = "Darío Silva 803",
                            OwnerDSId = 1,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2573)
                        },
                        new
                        {
                            Id = 14,
                            Address = "Darío Silva Cochera",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2575),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/C.+Col%C3%B3n+476,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.3674814,-54.1757085,17z/data=!3m1!4b1!4m6!3m5!1s0x95092980b6fbe707:0x3f99b6b98961385b!8m2!3d-32.3674814!4d-54.1731282!16s%2Fg%2F11fn9p0pws?hl=es-419&entry=ttu",
                            LatLong = "-32.3674814,-54.1757085",
                            Name = "Darío Silva Cochera",
                            OwnerDSId = 1,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2576)
                        },
                        new
                        {
                            Id = 15,
                            Address = "Treinta y Tres 299",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2578),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/Treinta+y+Tres+299,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.3765821,-54.1703877,17z/data=!3m1!4b1!4m6!3m5!1s0x95092bd6c1beccc3:0xb91b3165ec6107e3!8m2!3d-32.3765821!4d-54.1678074!16s%2Fg%2F11gmz7h_cl?hl=es-419&entry=ttu",
                            LatLong = "-32.3765821,-54.1703877",
                            Name = "Treinta y Tres 299",
                            OwnerDSId = 1,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2578)
                        },
                        new
                        {
                            Id = 16,
                            Address = "Manuel Oribe 788",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2581),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/C.+Gral.+Manuel+Oribe+788,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.3764414,-54.1706063,17z/data=!3m1!4b1!4m6!3m5!1s0x95092bd69533354f:0xd6a6a68977288372!8m2!3d-32.3764414!4d-54.168026!16s%2Fg%2F11h57sb583?hl=es-419&entry=ttu",
                            LatLong = "-32.3764414,-54.1706063",
                            Name = "Manuel Oribe 788",
                            OwnerDSId = 1,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2581)
                        },
                        new
                        {
                            Id = 17,
                            Address = "Rincón Artigas 702",
                            CityDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2583),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/Dr+Rincon+Artigas+702,+37000+Melo,+Departamento+de+Cerro+Largo/@-32.3690096,-54.176412,17z/data=!3m1!4b1!4m6!3m5!1s0x95092980ee49a557:0xfbaefe3d055f9ab9!8m2!3d-32.3690096!4d-54.1738317!16s%2Fg%2F11h_c4zxvw?hl=es-419&entry=ttu",
                            LatLong = "-32.3690096,-54.176412",
                            Name = "Rincón Artigas 702",
                            OwnerDSId = 2,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2584)
                        },
                        new
                        {
                            Id = 18,
                            Address = "Maldonado 1106",
                            CityDSId = 2,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2586),
                            EstateIsRented = false,
                            GoogleMapsURL = "https://www.google.com/maps/place/Maldonado+1106,+11100+Montevideo,+Departamento+de+Montevideo/@-34.9097969,-56.1945273,17z/data=!3m1!4b1!4m6!3m5!1s0x959f81c066a6fb4d:0xdb3d1d7d172a0f4c!8m2!3d-34.9097969!4d-56.191947!16s%2Fg%2F11fhvn7njf?hl=es-419&entry=ttu",
                            LatLong = "-34.9097969,-56.1945273",
                            Name = "Maldonado 1106",
                            OwnerDSId = 1,
                            PresentRentId = 0,
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2587)
                        });
                });

            modelBuilder.Entity("Buildyv2.Models.File1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RentId")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RentId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("Buildyv2.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<decimal?>("LabourCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Month")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EstateId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("Buildyv2.Models.OwnerDS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OwnerDS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "violet",
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2085),
                            Name = "Mirta",
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2086)
                        },
                        new
                        {
                            Id = 2,
                            Color = "orange",
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2088),
                            Name = "Gladys",
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2089)
                        },
                        new
                        {
                            Id = 3,
                            Color = "green",
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2091),
                            Name = "Cristina",
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(2092)
                        });
                });

            modelBuilder.Entity("Buildyv2.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("ReportId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("Buildyv2.Models.ProvinceDS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryDSId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NominatimProvinceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryDSId");

                    b.ToTable("ProvinceDS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(1772),
                            Name = "Cerro Largo",
                            NominatimProvinceCode = "CL",
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(1799)
                        },
                        new
                        {
                            Id = 2,
                            CountryDSId = 1,
                            Creation = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(1801),
                            Name = "Montevideo",
                            NominatimProvinceCode = "MO",
                            Update = new DateTime(2024, 3, 10, 0, 15, 40, 371, DateTimeKind.Local).AddTicks(1802)
                        });
                });

            modelBuilder.Entity("Buildyv2.Models.Rent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Datetime_monthInit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MonthlyValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PrimaryTenantId")
                        .HasColumnType("int");

                    b.Property<bool>("RentIsEnded")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<string>("Warrant")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstateId");

                    b.ToTable("Rent");
                });

            modelBuilder.Entity("Buildyv2.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<string>("Month")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EstateId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("Buildyv2.Models.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RentId");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("Buildyv2.Models.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Worker");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "role",
                            ClaimValue = "admin",
                            UserId = "c2ee6493-5a73-46f3-a3f2-46d1d11d7176"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "role",
                            ClaimValue = "user",
                            UserId = "e0765c93-676c-4199-b7ee-d7877c471821"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c2ee6493-5a73-46f3-a3f2-46d1d11d7176",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "e0765c93-676c-4199-b7ee-d7877c471821",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        },
                        new
                        {
                            UserId = "58fbedfc-e682-479b-ba46-19ef4c137d2a",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        },
                        new
                        {
                            UserId = "11c767dc-e8ce-448e-8fdb-ee590a44a3ff",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Buildyv2.Models.CityDS", b =>
                {
                    b.HasOne("Buildyv2.Models.ProvinceDS", "ProvinceDS")
                        .WithMany()
                        .HasForeignKey("ProvinceDSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProvinceDS");
                });

            modelBuilder.Entity("Buildyv2.Models.Estate", b =>
                {
                    b.HasOne("Buildyv2.Models.CityDS", "CityDS")
                        .WithMany()
                        .HasForeignKey("CityDSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Buildyv2.Models.OwnerDS", "OwnerDS")
                        .WithMany()
                        .HasForeignKey("OwnerDSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityDS");

                    b.Navigation("OwnerDS");
                });

            modelBuilder.Entity("Buildyv2.Models.File1", b =>
                {
                    b.HasOne("Buildyv2.Models.Rent", "Rent")
                        .WithMany("ListFiles")
                        .HasForeignKey("RentId");

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("Buildyv2.Models.Job", b =>
                {
                    b.HasOne("Buildyv2.Models.Estate", "Estate")
                        .WithMany("ListJobs")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");
                });

            modelBuilder.Entity("Buildyv2.Models.Photo", b =>
                {
                    b.HasOne("Buildyv2.Models.Job", "Job")
                        .WithMany("ListPhotos")
                        .HasForeignKey("JobId");

                    b.HasOne("Buildyv2.Models.Report", "Report")
                        .WithMany("ListPhotos")
                        .HasForeignKey("ReportId");

                    b.Navigation("Job");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Buildyv2.Models.ProvinceDS", b =>
                {
                    b.HasOne("Buildyv2.Models.CountryDS", "CountryDS")
                        .WithMany()
                        .HasForeignKey("CountryDSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryDS");
                });

            modelBuilder.Entity("Buildyv2.Models.Rent", b =>
                {
                    b.HasOne("Buildyv2.Models.Estate", "Estate")
                        .WithMany("ListRents")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");
                });

            modelBuilder.Entity("Buildyv2.Models.Report", b =>
                {
                    b.HasOne("Buildyv2.Models.Estate", "Estate")
                        .WithMany("ListReports")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");
                });

            modelBuilder.Entity("Buildyv2.Models.Tenant", b =>
                {
                    b.HasOne("Buildyv2.Models.Rent", "Rent")
                        .WithMany("ListTenants")
                        .HasForeignKey("RentId");

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("Buildyv2.Models.Worker", b =>
                {
                    b.HasOne("Buildyv2.Models.Job", "Job")
                        .WithMany("ListWorkers")
                        .HasForeignKey("JobId");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Buildyv2.Models.BuildyRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Buildyv2.Models.BuildyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Buildyv2.Models.BuildyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Buildyv2.Models.BuildyRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Buildyv2.Models.BuildyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Buildyv2.Models.BuildyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Buildyv2.Models.Estate", b =>
                {
                    b.Navigation("ListJobs");

                    b.Navigation("ListRents");

                    b.Navigation("ListReports");
                });

            modelBuilder.Entity("Buildyv2.Models.Job", b =>
                {
                    b.Navigation("ListPhotos");

                    b.Navigation("ListWorkers");
                });

            modelBuilder.Entity("Buildyv2.Models.Rent", b =>
                {
                    b.Navigation("ListFiles");

                    b.Navigation("ListTenants");
                });

            modelBuilder.Entity("Buildyv2.Models.Report", b =>
                {
                    b.Navigation("ListPhotos");
                });
#pragma warning restore 612, 618
        }
    }
}
